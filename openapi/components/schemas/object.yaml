type: object
properties:
  _type:
    $ref: ./_type.yaml
  _id:
    description: |
      Unique object ID in UUID format
    type: string
    format: uuidv4
    examples:
      - abdd1245-bbf9-4085-9366-f11c0f737c1d
  _revision:
    description: |
      Revision number of the object. This number helps with ensuring data consistency during changes. Every time object is changed, it's revision number has to change.
    type: string
    examples:
      - 16dabe62-61e9-4549-a6bd-07cecfbc3508
  _txn:
    description: | 
      `_txn` is transaction number. Multiple objects can be changed during a single transaction. All objects changed during a single transaction receive same `txn`.
    type: string
    examples:
      - 792a5029-63c9-4c07-995c-cbc063aaac2c
  _objectType:
    description: |
      Name of the object that is being added
    type: string
    examples:
      - Continent
  _value:
    description: |
      Value of the object that is being added
    type: string
    examples:
      - Europe
  _file:
    description: |
      A flag that indicates if the object is a file and it's file type. If empty, object is not a file. If value is present, it is a file extension of the file (e.g. ".txt", ".jpg").
    type: string
    examples:
      - jpg
patternProperties:
  ^[a-z](_?[a-z0-9]+)*$:
    oneOf:
      - $ref: ./absent.yaml
      - $ref: ./boolean.yaml
      - $ref: ./integer.yaml
      - $ref: ./number.yaml
      - $ref: ./binary.yaml
      - $ref: ./string.yaml
      - $ref: ./text.yaml
      - $ref: ./dateTime.yaml
      - $ref: ./date.yaml
      - $ref: ./time.yaml
      - $ref: ./temporal.yaml
      - $ref: ./geometry.yaml
      - $ref: ./spatial.yaml
      - $ref: ./money.yaml
      - $ref: ./file.yaml
      - $ref: ./image.yaml
      - $ref: ./generic.yaml
      - $ref: ./ref.yaml
      - $ref: ./backref.yaml
      - $ref: ./array.yaml
      - $ref: ./URL.yaml
      - $ref: ./URI.yaml
      # - $ref: ./object.yaml
additionalProperties: false
description: |
  Object represents a single row in a table.

  Some properties can reference other objects, using composition as
  specified in `components/schemas/ref`, optionally dublicating
  properties from a referenced model or extending referenced model with
  new properties.
