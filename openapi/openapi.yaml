openapi: 3.1.0

info:
  version: 0.2.2
  title: Universal application programming interface
  contact:
    name: IVPK
    url: https://ivpk.lrv.lt/
    email: info@ivpk.lt
  license:
    name: CC-BY 4.0
    url: https://creativecommons.org/licenses/by/4.0/
  summary: |
    Universal API specification, provided as OpenAPI JSON file for Lithuanian
    government institutions as a template for implementing API's for data
    exchange in a standardized and interoperable manner.
  description: |
    # Introduction

    This document is an API specification template for all Lithuanian
    government institutions.

    Institutions implementing API should reuse most of the specification as is
    and only add customizable parts expressed as path parameters or schema
    fields specified as a pattern.

    This specification should be used together with
    [DSA](https://ivpk.github.io/dsa) specification.

    UAPI provides a template for data exchange protocol and DSA provides
    schemas.

    Final API specification should be generated by combining UAPI and DSA
    together and this (in future) can be done in Data Portal (data.gov.lt).

    ## Specifications

    - [UAPI](https://ivpk.github.io/uapi) - this document, describes data exchange protocol and format.
    - [DSA](https://ivpk.github.io/dsa) - Data Structure Mapping table format
      specification, describes a table format, for mapping data models between
      Physical, Logical and Conceptual data models.

      Logical data model from DSA tables are used as API schemas. UDTS only
      describes protocol, DSA tables provides data schemas for UDTS API.

      DSA and UDTS are used together.
    - DCAT-AP-LT - a semantic data model specification, based on BregDCAT-AP.

    ## Contact Details
    
    This document is maintained by Lithuanian [Information Society Development
    Community](https://ivpk.lrv.lt/) (IVPK).

    If you found an error in the document, you can report it by registering a
    [GitHub issue](https://github.com/ivpk/uapi/issues/new).

    ## Legal basis
    
    This specification is provided in accordance to

    - [Lietuvos respublikos valstybės informacinių išteklių valdymo įstatymas
      (XI-1807)](https://www.e-tar.lt/portal/lt/legalAct/TAR.85C510BA700A/asr),
    - [Dėl duomenų teikimo formatų ir standartų rekomendacijų patvirtinimo
      (T-36)](https://e-seimas.lrs.lt/portal/legalAct/lt/TAD/TAIS.445504/asr).


    # Architecture

    ![](/static/architecture.png)

    Diagram above provides a high level overview listing main components
    involved in data exchange.

    ## Components

    Data exchange and interoperability architecture consists of following main
    components:

    - **Data** source and **Data Service** - these components represents all
      data sources, including variuos databases, web services, CSV, XLSX or
      other data tables maintained by all the government institutions.

      Data might be read directly from a primary data source or through a data
      service. 

    - **Data agent** - is a software component similar to **Data Service** but
      published data in a standardized UDTS protocol and format.

      IVPK provides an [Universal Data Agent
      solution](https://github.com/atviriduomenys/spinta/), which uses DSA
      table to convert between data source and UDTS protocol and data format.

      Organizations are free to implement their own Data Agent solution
      according to UDTS specification.

    - **Data Catalog** - is used cataloging datasets from all public
      institutions. Data Catalog is built on top of
      [DCAT-AP](https://op.europa.eu/en/web/eu-vocabularies/dcat-ap) data model
      and provides user interface for managing DSA tables.

      Data Catalog is also used to manage smart data contracts.

      Data Catalog receives DSA tables from Data Agent, provides modified
      versions of DSA tables back to Data Agent, exports API specifications to
      API Gateway in OpenAPI format and exports available data scopes and
      information about smart contracts into Auth service.

      Data Catalog does not have access to data, it is used only to manage
      metadata about data.

    - **API Gateway** - is used as a reverse proxy and passes Data user
      requests to one of many Data agent. Data Agents can't be accessed
      directly, they are available only through API Gateway.

      API Gateway provides load balancing, rate limiting, request validation
      against OpenAPI schemas, access token validation with Auth service and
      request logging and metrics.

    - **Auth service** - provides client and user authentication and
      authorization services, supporting both OAuth [Client
      Credentials](https://oauth.net/2/grant-types/client-credentials/) and
      [Authorization Code](https://oauth.net/2/grant-types/authorization-code/)
      flows.

    Diagram is divided in two main data and metadata flows.

    ## Metadata flow

    First **metadata flow** is needed to produce a final API specification in
    OpenAPI format. This involves following steps:

    1. **Data Agent** extracts data structure from Data source or Data
       Service in [DSA](https://ivpk.github.io/dsa) table format and passes
       it to **Data Catalog**.

       At the same time, **Data Agent** receives updated DSA version from
       **Data Catalog**.

       This process is automated and DSA metadata exchange is done
       periodically (for example once every day).

    2. Data steward from each organization manually edits DSA tables using
       **Data Catalog** or other means, to map physical data model with logical
       data model which will be used to publish data. Logical data model is
       aligned with a [conceptual data
       model](https://semiceu.github.io/style-guide/1.0.0/gc-conceptual-model-conventions.html).

    3. DSA tables marked as ready for publishing are converted into JSON
       Schemas and merged with UDTS OpenAPI specification template to produce
       final OpenAPI specification, which is published in **API Gateway**.

       At the same time list of available authorization scopes are generated
       from code names specified in DSA table and published to **Authentication
       and authorization service**.


    ## Data flow

    Next **data flow** represents, how actual data moves through all the
    components:

    1. **Data Agent** reads data directly from **Data source** or through a
       **Data Service**. Data Agent supports multiple data exchange protocols and
       formats.

       Data Agent uses DSA table to transform data between physical and logical
       data models and between source protocol and format into standardized
       UDTS data exchange protocol using JSON format.

    2. **Data Agent** performs data authorization, using authorization scopes.
       Authorization scopes are validated with **Auth Service**. Using
       authorization scopes and DSA, Data Agent applies data filters in order to
       return only those data objects, which are available for a specific data
       user.

    3. **API Gateway** works as a reverse proxy and load balancer, accepts
       requests from data users, validates these requests against OpenAPI
       schemas received from **Data Catalog**, validates authorization tokens
       with **Auth service**, provides request logging, rate limiting and other
       services.

       **API Gateway** after initial validation, passed requests to **Data
       Agent**, which reads data from primary sources and provides protocol and
       format conversions.

    4. **Data user** authenticates using **Auth service* and receives access
       token, which authorization scopes. Using access token, Data user makes
       request to API Gateway by providing access token and receives data or
       error response if something goes wrong.



    # REST API
    
    This Data API is an integral part of the Data Portal. The purpose of the
    Data Portal is to provide metadata at the highest level of maturity, in
    various formats, and corresponding data via a convenient machine-readable
    interface (API), adhering to the highest data publishing standards.

    All datasets provided by this API are combined into a large data map, where
    data can be interconnected, presented in bulk or in desired slices.
    Operations are provided for downloading data incrementally.

    The API is generated dynamically from the model code names located in the
    [**DSA**](https://atviriduomenys.readthedocs.io/dsa/index.html) model
    column. Model names can have namespaces, and namespaces are separated by
    the `/` symbol, for example:

        /datasets/gov/ivpk/dp/dcat/Dataset

    This address is made of the `datasets/gov/ivpk/dp/dcat` namespace and the
    `Dataset` model name.

    The `datasets` namespace indicates that the data is raw, i.e., as provided
    by a certain institution. Over time, all institutional data will be
    transformed into a uniform national dictionary, and for example
    `datasets/gov/dc/geo/Continent` may be merged into a common `Continent`
    model in the root namespace. This namespace is likely to be `onthology`,
    thus defining a specific ruleset for the rest of the URI structure based on
    a national or EU semantic model. It would be supported by a national
    metadata catalog, that would be maintained by all organisations in scope
    and would provide a way to understand and find datasets or their internal
    structures.
    
    However, to ensure a stable and constant API, the initial raw data API
    endpoints and URIs will be preserved.

    Specifically, all models in the `datasets` namespace have a clearly defined
    structure. For example, while examining the `datasets/gov/dc/geo/Continent`
    example, the meanings of the separate path components are as follows:

    - `datasets/` - namespace for raw primary institutional data.
    - `gov/` - namespace for government institution data.
    - `dc/` - acronym for a specific government institution.
    - `geo/` - abbreviation for the institution's open data set.
    - `Continent` - data model (or table).

    Once the system is fully operational, this API, and other APIs based on
    this specification will be provided by an unified endpoint api.gov.lt.

externalDocs:
  url: https://atviriduomenys.readthedocs.io/api/index.html

servers:
  - url: get.data.gov.lt
    description: Production data access server
  - url: put.data.gov.lt
    description: Production data update server
  - url: get-test.data.gov.lt
    description: Test data access server
  - url: put-test.data.gov.lt
    description: Test data update server

tags:
  - name: objects
    description: Operations with multiple Objects
  - name: object
    description: Operations with single Object
  - name: change
    description: Change tracking operations
  - name: services
    description: |
      Service functions are not as restricted as data API endpoints. Services
      are not required to return an object with a public id, there are no
      changes API, nor revisions.

      This section is primarily for definition of legacy or non data access services that do not have to be fully based on DSA data structure.
  - name: utility
    description: Utility operations performed on the API itself

paths:
  /version:
    $ref: paths/version.yaml
  /health:
    $ref: paths/health.yaml
  /{group}/{form}/{org}/{catalog}/{dataset}/{version}/{model}:
    $ref: paths/model.yaml
  /{group}/{form}/{org}/{catalog}/{dataset}/{version}/{model}/{id}:
    $ref: paths/object.yaml
  /{group}/{form}/{org}/{catalog}/{dataset}/{version}/{model}/{id}/:wipe:
    $ref: paths/wipe.yaml
  /{group}/{form}/{org}/{catalog}/{dataset}/{version}/{model}/{id}/{property}:
    $ref: paths/property.yaml
  /{group}/{form}/{org}/{catalog}/{dataset}/{version}/{model}/:changes/{cid}:
    $ref: paths/changes.yaml
  /services/{form}/{org}/{catalog}/{dataset}/{version}/{service}:
    $ref: paths/service.yaml
components:
  securitySchemes:

    UAPI_test_auth:
      description: |
        Test environment authentication.

        Client Credentials flow
        Provides access based on client credentials. Used to manage data for your Organisation. Access is granted to perform actions based on scope selected and access levels assigned to the client credentials.

        Authorization Code flow
        Provides general access to the data. Data access is managed by client rights and the authorization code. In addition to that, if there are active Smart Contracts associated with the client.

        **Scope elements**
        The core structure of the scope is `uapi:/{group}/{form}/{org}/{catalog}/{dataset}/{model}/@{scope}/:{action}`

        This is a full path that can be used to narrow down the scope of access. It is constructed from these elements:
          - `uapi:/` - core API element. Grants all access if used on its own.
          - `uapi:/:{action}` - provides `{action}` access on all elements.
          - `uapi:/@{scope}` - provides all access on elements based on `{scope}` filter.
          - `uapi:/@{scope}/:{action}` - provides `{action}` acces s on elements based on `{scope}` filter.
          - `uapi:/{group}/{form}/{org}/{catalog}/{dataset}` - provides all access for a specific `{dataset}`

        List of available `{action}`:
          - `getone` - ability to get one object data, based on provided identifier.
          - `getall` - ability to get a list of all objects.
          - `search` - ability to get data based on URL query.
          - `changes` - ability to get change history of a single object or multiple objects.
          - `insert` - ability to create new objects.
          - `update` - ability to update existing objects.
          - `delete` - galimybė trinti objektus, paliekant įrašą keitimų istorijoje.
          - `wipe` - galimybė neatstatomai trinti objektus, nepaliekant įrašo keitimų istorijoje.

        Combined actions:
          - `read` - combines getone, getall, search, changes.
          - `write` - combines insert, update, delete.
          - `upsert` - combines insert and update.
          - `rw` - combines read and write.

        The scope definition is dynamic and is dependent on the specific resource and UAPI implementation. Additional usage specific scope can be defined added to the flows below.

        The mandatory part is the use of OAuth as the authentication and authorization method and the use of either Client Credentials or Autorization Code flows, or both.

      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://auth.gov.lt/auth/token
          scopes:
            uapi:/ : All access
        authorizationCode:
          authorizationUrl: https://api.gov.lt/oauth
          tokenUrl: https://auth.gov.lt/auth/token
          scopes:
            uapi:/ : All access

    UAPI_prod_auth:
      description: |
        Client Credentials flow
        Provides access based on client credentials. Used to manage data for your Organisation. Access is granted to perform actions based on scope selected and access levels assigned to the client credentials.

        Authorization Code flow
        Provides general access to the data. Data access is managed by client rights and the authorization code. In addition to that, if there are active Smart Contracts associated with the client.

        **Scope elements**
        The core structure of the scope is `uapi:/{group}/{form}/{org}/{catalog}/{dataset}/{model}/@{scope}/:{action}`

        This is a full path that can be used to narrow down the scope of access. It is constructed from these elements:
          - `uapi:/` - core API element. Grants all access if used on its own.
          - `uapi:/:{action}` - provides `{action}` access on all elements.
          - `uapi:/@{scope}` - provides all access on elements based on `{scope}` filter.
          - `uapi:/@{scope}/:{action}` - provides `{action}` acces s on elements based on `{scope}` filter.
          - `uapi:/{group}/{form}/{org}/{catalog}/{dataset}` - provides all access for a specific `{dataset}`

        List of available `{action}`:
          - `getone` - ability to get one object data, based on provided identifier.
          - `getall` - ability to get a list of all objects.
          - `search` - ability to get data based on URL query.
          - `changes` - ability to get change history of a single object or multiple objects.
          - `insert` - ability to create new objects.
          - `update` - ability to update existing objects.
          - `delete` - galimybė trinti objektus, paliekant įrašą keitimų istorijoje.
          - `wipe` - galimybė neatstatomai trinti objektus, nepaliekant įrašo keitimų istorijoje.

        Combined actions:
          - `read` - combines getone, getall, search, changes.
          - `write` - combines insert, update, delete.
          - `upsert` - combines insert and update.
          - `rw` - combines read and write.

        The scope definition is dynamic and is dependent on the specific resource and UAPI implementation. Additional usage specific scope can be defined added to the flows below.

        The mandatory part is the use of OAuth as the authentication and authorization method and the use of either Client Credentials or Autorization Code flows, or both.
      type: oauth2
      flows:
        clientCredentials: 
          tokenUrl: https://auth.gov.lt/auth/token
          scopes:
            uapi:/ : All access
        authorizationCode:
          authorizationUrl: https://api.gov.lt/oauth
          tokenUrl: https://auth.gov.lt/auth/token
          scopes:
            uapi:/ : All access
