openapi: 3.1.0

info:
  title: Universal application programming interface
  summary: Open Data Repository API for data access and upload
  description: |
    The Open Data Repository is an integral part of the Open Data Portal. The purpose of the repository is to publish data at the highest level of maturity, in various formats, via a convenient machine-readable interface (API), adhering to the highest data publishing standards.

    All data sets published in the repository are combined into a large database, where data can be interconnected, presented in bulk or in desired slices. Tools are provided for downloading data incrementally.

    The API is generated dynamically from the model code names located in the [**DSA**](https://atviriduomenys.readthedocs.io/dsa/index.html) model column. Model names can have namespaces, and namespaces are separated by the `/` symbol, for example:

    `/datasets/gov/dc/geo/Continent`

    This address is made up of the `datasets/gov/dc/geo` namespace and the `Continent` model name.

    The `datasets` namespace indicates that the data is raw, i.e., as provided by a certain institution. Over time, all institutional data will be transformed into a uniform national dictionary, and for example `datasets/gov/dc/geo/Continent` may be merged into a common `Continent` model in the root namespace. This namespace is likely to be `onthology`, thus defining a specific ruleset for the rest of the URI structure based on a national or EU semantic model. It would be supported by a national metadata catalog, that would be maintained by all organisations in scope and would provide a way to understand and find datasets or their internal structures.
    
    However, to ensure a stable and constant API, the initial raw data API endpoints and URIs will be preserved.

    Specifically, all models in the `datasets` namespace have a clearly defined structure. For example, while examining the `datasets/gov/dc/geo/Continent` example, the meanings of the separate path components are as follows:

    * `datasets/` - namespace for raw primary institutional data.

    * `gov/` - namespace for government institution data.

    * `dc/` - acronym for a specific government institution.

    * `geo/` - abbreviation for the institution's open data set.

    * `Continent` - data model (or table).

    **Once the system is fully operational, this API, and other APIs based on this specification will be provided by a unified endpoint api.gov.lt.**

  version: 0.2.0
  license:
    name: GDFL
    url: https://www.gnu.org/licenses/fdl-1.3.html

externalDocs:
  url: https://atviriduomenys.readthedocs.io/api/index.html

servers:
  - url: get.data.gov.lt
    description: Production data access server
  - url: put.data.gov.lt
    description: Production data update server
  - url: get-test.data.gov.lt
    description: Test data access server
  - url: put-test.data.gov.lt
    description: Test data update server

tags:
  - name: objects
    description: Operations with multiple Objects
  - name: object
    description: Operations with single Object
  - name: change
    description: Change tracking operations
  - name: services
    description: |
      Service functions are not as restricted as data API endpoints. Services
      are not required to return an object with a public id, there are no
      changes API, nor revisions.

      This section is primarily for definition of legacy or non data access services that do not have to be fully based on DSA data structure.
  - name: utility
    description: Utility operations performed on the API itself

paths:
  /version:
    $ref: paths/version.yaml
  /health:
    $ref: paths/health.yaml
  /{group}/{form}/{org}/{dataset}/{version}/{model}:
    $ref: paths/model.yaml
  /{group}/{form}/{org}/{dataset}/{version}/{model}/{id}:
    $ref: paths/object.yaml
  /{group}/{form}/{org}/{dataset}/{version}/{model}/{id}/:wipe:
    $ref: paths/wipe.yaml
  /{group}/{form}/{org}/{dataset}/{version}/{model}/{id}/{file}:
    $ref: paths/file.yaml
  /{group}/{form}/{org}/{dataset}/{version}/{model}/:changes/{cid}:
    $ref: paths/changes.yaml
  /services/{form}/{org}/{dataset}/{version}/{service}:
    $ref: paths/service.yaml
components:
  securitySchemes:

    UAPI_test_auth:
      description: |
        Test environment authentication.

        Client Credentials flow
        Provides access based on client credentials. Used to manage data for your Organisation. Access is granted to perform actions based on scope selected and access levels assigned to the client credentials.

        Authorization Code flow
        Provides general access to the data. Data access is managed by client rights and the authorization code. In addition to that, if there are active Smart Contracts associated with the client.
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://auth.gov.lt/auth/token
          scopes:
            read:datasets/gov/myorg/@myrole: Read objects in my Org for my Role
            write:datasets/gov/myorg/@myrole: Write objects in my Org for my Role
            rw:datasets/gov/myorg/@myrole: Read and Write objects in my Org for my Role
            write:datasets/gov/myorg/@myrole/:wipe: Wipe objects in my Org for my Role
            read:datasets/gov/myorg/: Read objects in my Org
            write:datasets/gov/myorg/: Write objects in my Org
            rw:datasets/gov/myorg/: Read and Write objects in my Org
            write:datasets/gov/myorg/:wipe: Wipe objects in my Org
        authorizationCode:
          authorizationUrl: https://api.gov.lt/oauth
          tokenUrl: https://auth.gov.lt/auth/token
          scopes:
            read:datasets/gov/:all: Read all objects in raw structures
            read:onthology/:all: Read all objects
            read:onthology/myContract/: Read all data based on active Smart Contracts

    UAPI_prod_auth:
      description: |
        Can be implemented based on the available security settings. Are not limmited to OAuth clientCredentials or authorizationCode implementations. But when API is provided via api.gov.lt gateway, clientCredentials and authorizationCode are preffered method. This functionality will be provided in a tandem with auth.gov.lt server, which will control the authentication. API agent (or equivalent functional component of the implemented API) will receive and double check the tokens (with auth.gov.lt server) and will control the row and operation level authorisation of data access.

        Client Credentials flow
        Provides access based on client credentials. Used to manage data for your Organisation. Access is granted to perform actions based on scope selected and access levels assigned to the client credentials.

        Authorization Code flow
        Provides general access to the data. Data access is managed by client rights and the authorization code. In addition to that, if there are active Smart Contracts associated with the client.
        **Scope elements**
        - read: - provides access to perform `getOne`, `getAll`, `getChanges` `getFile`.
        - write: - privides access to perform `insertAll`, `insertOne`, `upsertOne`, `updateOne`, `patchOne`, `deleteOne`
        - write:{}/:wipe - privides access to perform `wipeOne`
        - myorg - represents the organisation client is assigned to in the metadata catalogue
        - myrole - represents the role client is assigned in the metadata catalogue
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://auth.gov.lt/auth/token
          scopes:
            read:datasets/gov/myorg/@myrole: Read objects in my Org for my Role
            write:datasets/gov/myorg/@myrole: Write objects in my Org for my Role
            rw:datasets/gov/myorg/@myrole: Read and Write objects in my Org for my Role
            write:datasets/gov/myorg/@myrole/:wipe: Wipe objects in my Org for my Role
            read:datasets/gov/myorg/: Read objects in my Org
            write:datasets/gov/myorg/: Write objects in my Org
            rw:datasets/gov/myorg/: Read and Write objects in my Org
            write:datasets/gov/myorg/:wipe: Wipe objects in my Org
        authorizationCode:
          authorizationUrl: https://api.gov.lt/oauth
          tokenUrl: https://auth.gov.lt/auth/token
          scopes:
            read:datasets/gov/:all: Read all objects in raw structures
            read:onthology/:all: Read all objects
            read:onthology/myContract/: Read all data based on active Smart Contracts
