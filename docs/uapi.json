{
  "openapi": "3.1.0",
  "info": {
    "title": "Universal application programming interface",
    "summary": "Open Data Repository API for data access and upload",
    "description": "The Open Data Repository is an integral part of the Open Data Portal. The purpose of the repository is to publish data at the highest level of maturity, in various formats, via a convenient machine-readable interface (API), adhering to the highest data publishing standards.\n\nAll data sets published in the repository are combined into a large database, where data can be interconnected, presented in bulk or in desired slices. Tools are provided for downloading data incrementally.\n\nThe API is generated dynamically from the model code names located in the [**DSA**](https://atviriduomenys.readthedocs.io/dsa/index.html) model column. Model names can have namespaces, and namespaces are separated by the `/` symbol, for example:\n\n`/datasets/gov/dc/geo/Continent`\n\nThis address is made up of the `datasets/gov/dc/geo` namespace and the `Continent` model name.\n\nThe `datasets` namespace indicates that the data is raw, i.e., as provided by a certain institution. Over time, all institutional data will be transformed into a uniform national dictionary, and for example `datasets/gov/dc/geo/Continent` may be merged into a common `Continent` model in the root namespace. This namespace is likely to be `onthology`, thus defining a specific ruleset for the rest of the URI structure based on a national or EU semantic model. It would be supported by a national metadata catalog, that would be maintained by all organisations in scope and would provide a way to understand and find datasets or their internal structures.\n\nHowever, to ensure a stable and constant API, the initial raw data API endpoints and URIs will be preserved.\n\nSpecifically, all models in the `datasets` namespace have a clearly defined structure. For example, while examining the `datasets/gov/dc/geo/Continent` example, the meanings of the separate path components are as follows:\n\n* `datasets/` - namespace for raw primary institutional data.\n\n* `gov/` - namespace for government institution data.\n\n* `dc/` - acronym for a specific government institution.\n\n* `geo/` - abbreviation for the institution's open data set.\n\n* `Continent` - data model (or table).\n\n**Once the system is fully operational, this API, and other APIs based on this specification will be provided by a unified endpoint api.gov.lt.**\n",
    "version": "0.2.0",
    "license": {
      "name": "GDFL",
      "url": "https://www.gnu.org/licenses/fdl-1.3.html"
    }
  },
  "servers": [
    {
      "url": "get.data.gov.lt",
      "description": "Production data access server"
    },
    {
      "url": "put.data.gov.lt",
      "description": "Production data update server"
    },
    {
      "url": "get-test.data.gov.lt",
      "description": "Test data access server"
    },
    {
      "url": "put-test.data.gov.lt",
      "description": "Test data update server"
    }
  ],
  "tags": [
    {
      "name": "objects",
      "description": "Operations with multiple Objects"
    },
    {
      "name": "object",
      "description": "Operations with single Object"
    },
    {
      "name": "change",
      "description": "Change tracking operations"
    },
    {
      "name": "services",
      "description": "Service functions are not as restricted as data API endpoints. Services\nare not required to return an object with a public id, there are no\nchanges API, nor revisions.\n\nThis section is primarily for definition of legacy or non data access services that do not have to be fully based on DSA data structure.\n"
    },
    {
      "name": "utility",
      "description": "Utility operations performed on the API itself"
    }
  ],
  "externalDocs": {
    "url": "https://atviriduomenys.readthedocs.io/api/index.html"
  },
  "paths": {
    "/version": {
      "parameters": [
        {
          "$ref": "#/components/parameters/traceparent"
        },
        {
          "$ref": "#/components/parameters/tracestate"
        }
      ],
      "get": {
        "tags": [
          "utility"
        ],
        "security": [
          {}
        ],
        "summary": "Get API version",
        "description": "Get the version of the API that is being called\n",
        "operationId": "apiVersion",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "traceresponse": {
                "$ref": "#/components/headers/traceresponse"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/version"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          },
          "503": {
            "$ref": "#/components/responses/error503"
          }
        }
      }
    },
    "/health": {
      "parameters": [
        {
          "$ref": "#/components/parameters/traceparent"
        },
        {
          "$ref": "#/components/parameters/tracestate"
        }
      ],
      "get": {
        "tags": [
          "utility"
        ],
        "security": [
          {}
        ],
        "summary": "Perform the API health check",
        "description": "Performs API helth check with a check of the underlying system health\n",
        "operationId": "apiHealth",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "traceresponse": {
                "$ref": "#/components/headers/traceresponse"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/health"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          },
          "503": {
            "$ref": "#/components/responses/error503"
          }
        }
      }
    },
    "/{group}/{form}/{org}/{dataset}/{version}/{model}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/group"
        },
        {
          "$ref": "#/components/parameters/form"
        },
        {
          "$ref": "#/components/parameters/org"
        },
        {
          "$ref": "#/components/parameters/dataset"
        },
        {
          "$ref": "#/components/parameters/version"
        },
        {
          "$ref": "#/components/parameters/model"
        },
        {
          "$ref": "#/components/parameters/traceparent"
        },
        {
          "$ref": "#/components/parameters/tracestate"
        },
        {
          "$ref": "#/components/parameters/Cache-Control"
        },
        {
          "$ref": "#/components/parameters/If-None-Match"
        },
        {
          "$ref": "#/components/parameters/Accept-Language"
        }
      ],
      "head": {
        "tags": [
          "objects"
        ],
        "security": [
          {}
        ],
        "summary": "Return only headers for the API.",
        "description": "`HEAD` method requests the headers that would be returned if the HEAD request's URL was instead requested with the `GET` method.\n",
        "operationId": "modelHead",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/error400"
          }
        }
      },
      "get": {
        "tags": [
          "objects"
        ],
        "security": [
          {
            "UAPI_test_auth": [
              "read:datasets/gov/myorg/@myrole",
              "rw:datasets/gov/myorg/@myrole",
              "read:datasets/gov/myorg/",
              "rw:datasets/gov/myorg/",
              "read:datasets/gov/:all",
              "read:onthology/:all",
              "read:onthology/myContract/"
            ]
          },
          {
            "UAPI_prod_auth": [
              "read:datasets/gov/myorg/@myrole",
              "rw:datasets/gov/myorg/@myrole",
              "read:datasets/gov/myorg/",
              "rw:datasets/gov/myorg/",
              "read:datasets/gov/:all",
              "read:onthology/:all",
              "read:onthology/myContract/"
            ]
          }
        ],
        "summary": "Get multiple objects.",
        "description": "Return list of objects for a given model.\n",
        "operationId": "getAll",
        "parameters": [
          {
            "$ref": "#/components/parameters/query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "traceresponse": {
                "$ref": "#/components/headers/traceresponse"
              },
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Last-Modified": {
                "$ref": "#/components/headers/Last-Modified"
              },
              "ETag": {
                "$ref": "#/components/headers/ETag"
              },
              "Vary": {
                "$ref": "#/components/headers/Vary"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/objects"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/objects-csv"
                }
              }
            }
          },
          "304": {
            "description": "Not Modified",
            "headers": {
              "traceresponse": {
                "$ref": "#/components/headers/traceresponse"
              },
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Last-Modified": {
                "$ref": "#/components/headers/Last-Modified"
              },
              "ETag": {
                "$ref": "#/components/headers/ETag"
              },
              "Vary": {
                "$ref": "#/components/headers/Vary"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          },
          "503": {
            "$ref": "#/components/responses/error503"
          }
        }
      },
      "post": {
        "tags": [
          "objects"
        ],
        "security": [
          {
            "UAPI_test_auth": [
              "write:datasets/gov/myorg/@myrole",
              "rw:datasets/gov/myorg/@myrole"
            ]
          },
          {
            "UAPI_prod_auth": [
              "write:datasets/gov/myorg/",
              "rw:datasets/gov/myorg/"
            ]
          }
        ],
        "summary": "Create a single new object or create, update or delete multiple objects in a single request.",
        "description": "## Operation where one or multiple new objects are created.\n\nWhen multiple object are created _data is an array of new objects each listing \n* _op as operation to be performed\n* _type as a namespace of modelname where it is to be performed\n* the new object itself in a form of {\"_type\" : \"_value\"} format. Example {\"Continent\" : \"Europe\"}\n\nOr\n\nA single object is created. New object details should be provided in a form of {\"_type\" : \"_value\"} format. Example {\"Continent\" : \"Europe\"}\n",
        "operationId": "insertAll",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/multiInsert"
                  },
                  {
                    "$ref": "#/components/schemas/insert"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "traceresponse": {
                "$ref": "#/components/headers/traceresponse"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/objects"
                    },
                    {
                      "$ref": "#/components/schemas/object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "403": {
            "$ref": "#/components/responses/error403"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          },
          "503": {
            "$ref": "#/components/responses/error503"
          }
        }
      }
    },
    "/{group}/{form}/{org}/{dataset}/{version}/{model}/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/group"
        },
        {
          "$ref": "#/components/parameters/form"
        },
        {
          "$ref": "#/components/parameters/org"
        },
        {
          "$ref": "#/components/parameters/dataset"
        },
        {
          "$ref": "#/components/parameters/version"
        },
        {
          "$ref": "#/components/parameters/model"
        },
        {
          "$ref": "#/components/parameters/id"
        },
        {
          "$ref": "#/components/parameters/traceparent"
        },
        {
          "$ref": "#/components/parameters/tracestate"
        },
        {
          "$ref": "#/components/parameters/If-None-Match"
        },
        {
          "$ref": "#/components/parameters/Accept-Language"
        }
      ],
      "head": {
        "tags": [
          "object"
        ],
        "security": [
          {}
        ],
        "summary": "Return only headers for the API.",
        "description": "`HEAD` method requests the headers that would be returned if the HEAD request's URL was instead requested with the `GET` method.\n",
        "operationId": "headOne",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/error400"
          }
        }
      },
      "get": {
        "tags": [
          "object"
        ],
        "security": [
          {
            "UAPI_test_auth": [
              "read:datasets/gov/myorg/@myrole",
              "rw:datasets/gov/myorg/@myrole",
              "read:datasets/gov/myorg/",
              "rw:datasets/gov/myorg/",
              "read:datasets/gov/:all",
              "read:onthology/:all",
              "read:onthology/myContract/"
            ]
          },
          {
            "UAPI_prod_auth": [
              "read:datasets/gov/myorg/@myrole",
              "rw:datasets/gov/myorg/@myrole",
              "read:datasets/gov/myorg/",
              "rw:datasets/gov/myorg/",
              "read:datasets/gov/:all",
              "read:onthology/:all",
              "read:onthology/myContract/"
            ]
          }
        ],
        "summary": "Get a single object by given {id}.",
        "description": "Retrieve a single specific object based on it's unique object identifier {id}\n",
        "operationId": "getOne",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "traceresponse": {
                "$ref": "#/components/headers/traceresponse"
              },
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Last-Modified": {
                "$ref": "#/components/headers/Last-Modified"
              },
              "ETag": {
                "$ref": "#/components/headers/ETag"
              },
              "Vary": {
                "$ref": "#/components/headers/Vary"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/object"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/objects-csv"
                }
              }
            }
          },
          "304": {
            "description": "Not Modified",
            "headers": {
              "traceresponse": {
                "$ref": "#/components/headers/traceresponse"
              },
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Last-Modified": {
                "$ref": "#/components/headers/Last-Modified"
              },
              "ETag": {
                "$ref": "#/components/headers/ETag"
              },
              "Vary": {
                "$ref": "#/components/headers/Vary"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          },
          "503": {
            "$ref": "#/components/responses/error503"
          }
        }
      },
      "post": {
        "tags": [
          "object"
        ],
        "security": [
          {
            "UAPI_test_auth": [
              "write:datasets/gov/myorg/@myrole",
              "rw:datasets/gov/myorg/@myrole"
            ]
          },
          {
            "UAPI_prod_auth": [
              "write:datasets/gov/myorg/",
              "rw:datasets/gov/myorg/"
            ]
          }
        ],
        "summary": "Upsert an object by {id}. This operation can only be performed on fields that can be indexed.",
        "description": "This performs an `Upsert` action. First it checks if there is an existing object based on `{id}`, if there is, it performs `Patch` action, if there isn't it performs `Update`\n",
        "operationId": "upsertOne",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/upsert"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "traceresponse": {
                "$ref": "#/components/headers/traceresponse"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "403": {
            "$ref": "#/components/responses/error403"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          },
          "503": {
            "$ref": "#/components/responses/error503"
          }
        }
      },
      "put": {
        "tags": [
          "object"
        ],
        "security": [
          {
            "UAPI_test_auth": [
              "write:datasets/gov/myorg/@myrole",
              "rw:datasets/gov/myorg/@myrole"
            ]
          },
          {
            "UAPI_prod_auth": [
              "write:datasets/gov/myorg/",
              "rw:datasets/gov/myorg/"
            ]
          }
        ],
        "summary": "Update a single object by {id}.",
        "description": "Overwrite whole object. Property values, that are not given in request\nbody, will be reset to defaul values.\n\nThis triggers `_rev` to be updated. And before update, existing `_rev`\nwill be compared with given in request body, to prevent concurent\noverwrites.\n",
        "operationId": "updateOne",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/update"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "traceresponse": {
                "$ref": "#/components/headers/traceresponse"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "403": {
            "$ref": "#/components/responses/error403"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          },
          "503": {
            "$ref": "#/components/responses/error503"
          }
        }
      },
      "patch": {
        "tags": [
          "object"
        ],
        "security": [
          {
            "UAPI_test_auth": [
              "write:datasets/gov/myorg/@myrole",
              "rw:datasets/gov/myorg/@myrole"
            ]
          },
          {
            "UAPI_prod_auth": [
              "write:datasets/gov/myorg/",
              "rw:datasets/gov/myorg/"
            ]
          }
        ],
        "summary": "Patch a single object.",
        "description": "Partial object update, only property values given in request body will\nbe update, other properties will not be touched.\n\nThis triggers `_rev` to be updated. And before update, existing `_rev`\nwill be compared with given in request body, to prevent concurent\noverwrites.\n",
        "operationId": "patchOne",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "traceresponse": {
                "$ref": "#/components/headers/traceresponse"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "403": {
            "$ref": "#/components/responses/error403"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          },
          "503": {
            "$ref": "#/components/responses/error503"
          }
        }
      },
      "delete": {
        "tags": [
          "object"
        ],
        "security": [
          {
            "UAPI_test_auth": [
              "write:datasets/gov/myorg/@myrole",
              "rw:datasets/gov/myorg/@myrole"
            ]
          },
          {
            "UAPI_prod_auth": [
              "write:datasets/gov/myorg/",
              "rw:datasets/gov/myorg/"
            ]
          }
        ],
        "summary": "Delete a single object by {id}",
        "description": "Delete object. This is a soft delete operation, object should not be\ndeleted, but marked for deletion. Soft delete is needed for changes API\nto know, when something was deleted.\n\nAfter some agreed time period, objects marked as deleted can be deleted\npermanently.\n\nBefore delete, existing `_rev` will be compared with given in request\nbody, to prevent concurent overwrites.\n",
        "operationId": "deleteOne",
        "responses": {
          "204": {
            "description": "No Content",
            "headers": {
              "traceresponse": {
                "$ref": "#/components/headers/traceresponse"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "403": {
            "$ref": "#/components/responses/error403"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          },
          "503": {
            "$ref": "#/components/responses/error503"
          }
        }
      }
    },
    "/{group}/{form}/{org}/{dataset}/{version}/{model}/{id}/:wipe": {
      "parameters": [
        {
          "$ref": "#/components/parameters/group"
        },
        {
          "$ref": "#/components/parameters/form"
        },
        {
          "$ref": "#/components/parameters/org"
        },
        {
          "$ref": "#/components/parameters/dataset"
        },
        {
          "$ref": "#/components/parameters/version"
        },
        {
          "$ref": "#/components/parameters/model"
        },
        {
          "$ref": "#/components/parameters/id"
        },
        {
          "$ref": "#/components/parameters/traceparent"
        },
        {
          "$ref": "#/components/parameters/tracestate"
        }
      ],
      "delete": {
        "tags": [
          "object"
        ],
        "security": [
          {
            "UAPI_test_auth": [
              "write:datasets/gov/myorg/:wipe"
            ]
          },
          {
            "UAPI_prod_auth": [
              "write:datasets/gov/myorg/:wipe"
            ]
          }
        ],
        "summary": "Hard delete a single object by {id}",
        "description": "## To be used by exception only\n```wipe``` operation is used by exception only, if there were errors in data upload scripts, data was currupted due to errors etc. It is best to test data upload in test environment.\n\nData upload practice of deleting all published data and reuploading it is not recommended, since that destroys all if the data change history and it may change data IDs. Data should be uploaded once and then updated whith what has changed.\n",
        "operationId": "wipeOne",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "traceresponse": {
                "$ref": "#/components/headers/traceresponse"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "wiped": {
                      "type": "boolean",
                      "examples": [
                        true
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "403": {
            "$ref": "#/components/responses/error403"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          },
          "503": {
            "$ref": "#/components/responses/error503"
          }
        }
      }
    },
    "/{group}/{form}/{org}/{dataset}/{version}/{model}/{id}/{file}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/group"
        },
        {
          "$ref": "#/components/parameters/form"
        },
        {
          "$ref": "#/components/parameters/org"
        },
        {
          "$ref": "#/components/parameters/dataset"
        },
        {
          "$ref": "#/components/parameters/version"
        },
        {
          "$ref": "#/components/parameters/model"
        },
        {
          "$ref": "#/components/parameters/id"
        },
        {
          "$ref": "#/components/parameters/traceparent"
        },
        {
          "$ref": "#/components/parameters/tracestate"
        },
        {
          "$ref": "#/components/parameters/If-None-Match"
        },
        {
          "$ref": "#/components/parameters/Accept-Language"
        },
        {
          "$ref": "#/components/parameters/file"
        }
      ],
      "get": {
        "tags": [
          "object"
        ],
        "security": [
          {
            "UAPI_test_auth": [
              "read:datasets/gov/myorg/@myrole",
              "rw:datasets/gov/myorg/@myrole",
              "read:datasets/gov/myorg/",
              "rw:datasets/gov/myorg/",
              "read:datasets/gov/:all",
              "read:onthology/:all",
              "read:onthology/myContract/"
            ]
          },
          {
            "UAPI_prod_auth": [
              "read:datasets/gov/myorg/@myrole",
              "rw:datasets/gov/myorg/@myrole",
              "read:datasets/gov/myorg/",
              "rw:datasets/gov/myorg/",
              "read:datasets/gov/:all",
              "read:onthology/:all",
              "read:onthology/myContract/"
            ]
          }
        ],
        "summary": "For a given specific object by {id}, retrieve a {file} from it's structure.",
        "description": "Retrieve a specific file from an object structure, where it is available.\n\nBy default when retrieving object you recive data items from it's structure, where files (documents, images, etc.) are part of it's set of data, they are not retrieved and this service is to be used.\n\nReturned content depends on the file but is presented as binary.\n",
        "operationId": "getFile",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "traceresponse": {
                "$ref": "#/components/headers/traceresponse"
              },
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Last-Modified": {
                "$ref": "#/components/headers/Last-Modified"
              },
              "ETag": {
                "$ref": "#/components/headers/ETag"
              },
              "Vary": {
                "$ref": "#/components/headers/Vary"
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "304": {
            "description": "Not Modified",
            "headers": {
              "traceresponse": {
                "$ref": "#/components/headers/traceresponse"
              },
              "Cache-Control": {
                "$ref": "#/components/headers/Cache-Control"
              },
              "Last-Modified": {
                "$ref": "#/components/headers/Last-Modified"
              },
              "ETag": {
                "$ref": "#/components/headers/ETag"
              },
              "Vary": {
                "$ref": "#/components/headers/Vary"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          },
          "503": {
            "$ref": "#/components/responses/error503"
          }
        }
      }
    },
    "/{group}/{form}/{org}/{dataset}/{version}/{model}/:changes/{cid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/group"
        },
        {
          "$ref": "#/components/parameters/form"
        },
        {
          "$ref": "#/components/parameters/org"
        },
        {
          "$ref": "#/components/parameters/dataset"
        },
        {
          "$ref": "#/components/parameters/version"
        },
        {
          "$ref": "#/components/parameters/model"
        },
        {
          "$ref": "#/components/parameters/cid"
        },
        {
          "$ref": "#/components/parameters/traceparent"
        },
        {
          "$ref": "#/components/parameters/tracestate"
        },
        {
          "$ref": "#/components/parameters/If-None-Match"
        },
        {
          "$ref": "#/components/parameters/Accept-Language"
        }
      ],
      "get": {
        "tags": [
          "change"
        ],
        "security": [
          {}
        ],
        "summary": "Get all object changes since given {cid} (change id).",
        "description": "Get latest changes to a table.\n\nIf {cid} is not given, return changes, since very first available\nchange.\n\nIf {cid} is gven, return only changes, since given change id, including\nchange id itself.\n\nThis API can return changes, that were returned previously, client\nshould be responsible for checking if a change was received previously\nor not.\n\nLast change id is included in the request, in order for clients to check\nif last change id matches change received by client. If last change\ndoes not match, then client should do a full synce, because if last\nchange id does not match, that means, that a data migration or some\nother alterations to data were made, which requires to do a full sync.\n",
        "operationId": "getChanges",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/changes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/error400"
          },
          "404": {
            "$ref": "#/components/responses/error404"
          },
          "500": {
            "$ref": "#/components/responses/error500"
          },
          "503": {
            "$ref": "#/components/responses/error503"
          }
        },
        "externalDocs": {
          "url": "https://atviriduomenys.readthedocs.io/api/index.html#changes"
        }
      }
    },
    "/services/{form}/{org}/{dataset}/{version}/{service}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/form"
        },
        {
          "$ref": "#/components/parameters/org"
        },
        {
          "$ref": "#/components/parameters/dataset"
        },
        {
          "$ref": "#/components/parameters/version"
        },
        {
          "$ref": "#/components/parameters/service"
        },
        {
          "$ref": "#/components/parameters/traceparent"
        },
        {
          "$ref": "#/components/parameters/tracestate"
        },
        {
          "$ref": "#/components/parameters/If-None-Match"
        },
        {
          "$ref": "#/components/parameters/Accept-Language"
        }
      ],
      "get": {
        "tags": [
          "services"
        ],
        "security": [
          {}
        ],
        "summary": "GET operation",
        "operationId": "getService"
      },
      "put": {
        "tags": [
          "services"
        ],
        "security": [
          {}
        ],
        "summary": "PUT operation",
        "operationId": "putService"
      },
      "post": {
        "tags": [
          "services"
        ],
        "security": [
          {}
        ],
        "summary": "POST operation",
        "operationId": "postService"
      },
      "delete": {
        "tags": [
          "services"
        ],
        "security": [
          {}
        ],
        "summary": "DELETE operation",
        "operationId": "deleteService"
      },
      "options": {
        "tags": [
          "services"
        ],
        "security": [
          {}
        ],
        "summary": "OPTIONS operation",
        "operationId": "serviceOptions"
      },
      "head": {
        "tags": [
          "services"
        ],
        "security": [
          {}
        ],
        "summary": "HEAD operation",
        "operationId": "serviceHead"
      },
      "patch": {
        "tags": [
          "services"
        ],
        "security": [
          {}
        ],
        "summary": "PATCH operation",
        "operationId": "patchService"
      },
      "trace": {
        "tags": [
          "services"
        ],
        "security": [
          {}
        ],
        "summary": "TRACE operation",
        "operationId": "serviceTrace"
      }
    }
  },
  "components": {
    "securitySchemes": {
      "UAPI_test_auth": {
        "description": "Test environment authentication.\n\nClient Credentials flow\nProvides access based on client credentials. Used to manage data for your Organisation. Access is granted to perform actions based on scope selected and access levels assigned to the client credentials.\n\nAuthorization Code flow\nProvides general access to the data. Data access is managed by client rights and the authorization code. In addition to that, if there are active Smart Contracts associated with the client.\n",
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://auth.gov.lt/auth/token",
            "scopes": {
              "read:datasets/gov/myorg/@myrole": "Read objects in my Org for my Role",
              "write:datasets/gov/myorg/@myrole": "Write objects in my Org for my Role",
              "rw:datasets/gov/myorg/@myrole": "Read and Write objects in my Org for my Role",
              "write:datasets/gov/myorg/@myrole/:wipe": "Wipe objects in my Org for my Role",
              "read:datasets/gov/myorg/": "Read objects in my Org",
              "write:datasets/gov/myorg/": "Write objects in my Org",
              "rw:datasets/gov/myorg/": "Read and Write objects in my Org",
              "write:datasets/gov/myorg/:wipe": "Wipe objects in my Org"
            }
          },
          "authorizationCode": {
            "authorizationUrl": "https://api.gov.lt/oauth",
            "tokenUrl": "https://auth.gov.lt/auth/token",
            "scopes": {
              "read:datasets/gov/:all": "Read all objects in raw structures",
              "read:onthology/:all": "Read all objects",
              "read:onthology/myContract/": "Read all data based on active Smart Contracts"
            }
          }
        }
      },
      "UAPI_prod_auth": {
        "description": "Can be implemented based on the available security settings. Are not limmited to OAuth clientCredentials or authorizationCode implementations. But when API is provided via api.gov.lt gateway, clientCredentials and authorizationCode are preffered method. This functionality will be provided in a tandem with auth.gov.lt server, which will control the authentication. API agent (or equivalent functional component of the implemented API) will receive and double check the tokens (with auth.gov.lt server) and will control the row and operation level authorisation of data access.\n\nClient Credentials flow\nProvides access based on client credentials. Used to manage data for your Organisation. Access is granted to perform actions based on scope selected and access levels assigned to the client credentials.\n\nAuthorization Code flow\nProvides general access to the data. Data access is managed by client rights and the authorization code. In addition to that, if there are active Smart Contracts associated with the client.\n**Scope elements**\n- read: - provides access to perform `getOne`, `getAll`, `getChanges` `getFile`.\n- write: - privides access to perform `insertAll`, `insertOne`, `upsertOne`, `updateOne`, `patchOne`, `deleteOne`\n- write:{}/:wipe - privides access to perform `wipeOne`\n- myorg - represents the organisation client is assigned to in the metadata catalogue\n- myrole - represents the role client is assigned in the metadata catalogue\n",
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://auth.gov.lt/auth/token",
            "scopes": {
              "read:datasets/gov/myorg/@myrole": "Read objects in my Org for my Role",
              "write:datasets/gov/myorg/@myrole": "Write objects in my Org for my Role",
              "rw:datasets/gov/myorg/@myrole": "Read and Write objects in my Org for my Role",
              "write:datasets/gov/myorg/@myrole/:wipe": "Wipe objects in my Org for my Role",
              "read:datasets/gov/myorg/": "Read objects in my Org",
              "write:datasets/gov/myorg/": "Write objects in my Org",
              "rw:datasets/gov/myorg/": "Read and Write objects in my Org",
              "write:datasets/gov/myorg/:wipe": "Wipe objects in my Org"
            }
          },
          "authorizationCode": {
            "authorizationUrl": "https://api.gov.lt/oauth",
            "tokenUrl": "https://auth.gov.lt/auth/token",
            "scopes": {
              "read:datasets/gov/:all": "Read all objects in raw structures",
              "read:onthology/:all": "Read all objects",
              "read:onthology/myContract/": "Read all data based on active Smart Contracts"
            }
          }
        }
      }
    },
    "parameters": {
      "traceparent": {
        "name": "traceparent",
        "in": "header",
        "description": "The `traceparent` request header represents the incoming request in a tracing system in a common format, understood by all vendors. For more context check [***trace-context***](https://w3c.github.io/trace-context/) documentation.\n",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^[0-9]{2}-[a-f0-9]{32}-[a-f0-9]{16}-[0-9]{2}",
          "description": "Consists of `version` `trace-id` `parent-id` `trace-flags` separated by `-`. \n\n`trace-id` recommended to be in UUIDv4\n",
          "examples": [
            "00-0af7651916cd43dd8448eb211c80319c-00f067aa0ba902b7-01"
          ]
        }
      },
      "tracestate": {
        "name": "tracestate",
        "in": "header",
        "required": true,
        "description": "The main purpose of the `tracestate` HTTP header is to provide additional vendor-specific trace identification information across different distributed tracing systems and is a companion header for the `traceparent` field. It also conveys information about the request’s position in multiple distributed tracing graphs.\nFor more context check [***trace-context***](https://w3c.github.io/trace-context/) documentation.\n",
        "schema": {
          "type": "string",
          "description": "Consists of a `list` of `list-members` separated by commas (`,`)\n",
          "examples": [
            "rojo=00f067aa0ba902b7,congo=t61rcWkgMzE"
          ]
        }
      },
      "group": {
        "name": "group",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "standards",
            "datasets"
          ]
        },
        "description": "Group of data, currently two groups are available:\n\n- `standards` - for data compatible with a standard.\n- `datasets` - for a non-standard data.\n\nThere is another group called `services`, which is not considered as\ndata API. Service API is different from data API, more flexible.\n"
      },
      "form": {
        "name": "form",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "gov",
            "com"
          ]
        },
        "description": "Organization, type, can be:\n\n- `gov` - government organization,\n- `com` - private organization.\n"
      },
      "org": {
        "name": "org",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^[a-z][a-z0-9]+$",
          "examples": [
            "RC"
          ]
        },
        "description": "Abbreviation or a short code name of an organization.\n\nShould be a single work all lower case string, must start with a non\nnumber symbol.\n"
      },
      "dataset": {
        "name": "dataset",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/dataset"
        },
        "description": "A dataset or a standard abbreviation or short code name.\n\nAll lower case, words separated with `_` symbol.\n"
      },
      "version": {
        "name": "version",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/datasetVersion"
        },
        "description": "Version determines a specific dataset version to be used when accessing data. This version definitions and metadata can be found in the catalog.\n\nIf version parameter is not provided, latest version is defaulted.\n"
      },
      "model": {
        "name": "model",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/model"
        },
        "description": "A short model code name.\n\nEach word startds with upper case letter, first letter can't be a\nnumber.\n"
      },
      "Cache-Control": {
        "name": "Cache-Control",
        "in": "header",
        "required": false,
        "description": "`Cache-Control` header should be used if service supports caching. It allows the user to provide directives from their side. `no-cache` can be used to request revalidation of data with the origin server before reuse. `no-store` can be used to request to not store the data in caches.\n\nMultiple directives can be used separated by `, `. If they are conflicting, most restrictive directive should be honored.\n",
        "schema": {
          "type": "string",
          "examples": [
            "no-cache"
          ]
        }
      },
      "If-None-Match": {
        "name": "If-None-Match",
        "in": "header",
        "required": false,
        "description": "Using `If-None-Match` client can provide a revision number of an object to server to check if modification to the object has occured, if not, server will return `304 - Not Modified`.\n",
        "schema": {
          "type": "string",
          "examples": [
            "16dabe62-61e9-4549-a6bd-07cecfbc3508"
          ]
        }
      },
      "Accept-Language": {
        "name": "Accept-Language",
        "in": "header",
        "required": false,
        "description": "`Accept-Language` header is used to indicate the language preference of the user. It's a list of values with quality factors (e.g., `\"de, en\"`).\n",
        "schema": {
          "type": "string",
          "examples": [
            "lt"
          ]
        }
      },
      "query": {
        "name": "query",
        "in": "query",
        "required": false,
        "description": "Object filter. This filter and the pattern used to form a querie conforms to [***URI syntax standard***](https://datatracker.ietf.org/doc/html/rfc3986).\n\nOther implementations of this specification can use more complex queries depending on filtering rules. They should comply to [***AST***](https://en.wikipedia.org/wiki/Abstract_syntax_tree) formatting and logic.\n\nQuery example: \n\n  ```?code=42&country.name=Lithuania&country.continent.name=Europe&_sort=-code,country.name&_limit=10&_select=name,country.name,country.continent.name```\n\n  ```?_select=_id,_rev&code._gt=42,country._id=26ae559c-e650-4e0d-90da-5c0907dcb9fd,&_or=1&code=1&code=2,&_count=1```\n",
        "schema": {
          "type": "object",
          "patternProperties": {
            "^_?[a-z](_?[a-z0-9]+)*(\\\\._?[a-z](_?[a-z0-9]+)*)*$": {
              "description": "Filter objects where given property is equal to given value.\n\nGiven property names, must be defined in data model.\n\nMore detailed definitions of these properties are available in [**DSA**](https://atviriduomenys.readthedocs.io/dsa/dimensijos.html#savybe)\n\nThe main operations are flexible, but have to conform to a strict syntax.\n\nSome reserved property names can be used for filtering:\n\n- `_type`\n- `_id`\n\nFilters can by done by joining multiple tables if `.` operator is\nused, which means, that two tables if needed must be joined in\norder to perform a filter.\n\nAlso after `.` there can be one of following filter operators:\n\n- `_gt` - greather than\n- `_ge` - greather than or equal\n- `_lt` - less than\n- `_le` - less than than or equal\n- `_sw` - starts with\n- `_ew` - ends with\n- `_co` - contains\n\nFor example to filter code to have agreater value than 42 a query containing `&code._gt=42` can be used.\n"
            }
          },
          "properties": {
            "_select": {
              "type": "string",
              "examples": [
                "name,country.name,country.continent.name"
              ],
              "description": "Comma separated list of properties to include in the result.\n\nSpecial value `*` can be used, to include all properties. This\ncan also be used on nested objects, for example `country.*` will\ninclude all properties from `country` object.\n\n`-` can be used to exclude a property from result, this will\nexclude properties that were included previously.\n\n`+` can be used to include additional properties to the result,\nif a property in select list is not prefixed with `+`, then only\ngiven property will be shown in result, but with `+` a property\nwill be added to the result leaving what would by added by\ndefault.\n\nBy default, all properties of a model will be included.\n\nWhen properties are specified in `a.b` form, `.` should join two\ntables and return properties from two tables if needed. This\nrequirement only applies if data are stored on the same data\nsource. An attempt to join data from multiple data sources,\nshould return an error.\n"
            },
            "_limit": {
              "type": "integer",
              "examples": [
                10
              ],
              "description": "Limit result to given number of objects.\n\nIf `_sort` is not given, then sorty by `_id`.\n"
            },
            "_sort": {
              "type": "string",
              "examples": [
                "-code,country.name"
              ],
              "description": "Comma separated list of properties, optionally prefixed with `+` or `-` operators to control sort direction:\n\n- `+` - ascending sort (1, 2, 3), this is used by default if sort direction is not given.\n- `-` - descending sort (3, 2, 1).\n"
            },
            "_count": {
              "type": "boolean",
              "description": "Return number of objects matching a given filter. If filter is\nnot given, return number of all objects.\n\nResult should be given in following form:\n\n```json\n{\n  \"_data\": [\n    {\"_count\": 42}\n  ]\n}\n```\n"
            },
            "_page": {
              "type": "string",
              "description": "If _limit is set and results in multiple pages of results to be available, _page value is returned as part of the response, linking to the next page after the current set. This value can be used directly for example `&page=\"WyIxOTAzNmM0ZS1mZmIyLTQyMTAtYjIyMi01YTJkZDQ2MWU5MzQiXQ==\"`. Or through a next page request `&page.next`.\n\nRecommeded format `base64` - `base64(json([v1, v2, ...]))`\n"
            }
          }
        }
      },
      "id": {
        "name": "id",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/id"
        },
        "description": "Public global object identifier.\n\nIdentifiers should be UUID v4.\n\nOnce object is assigned a global identifier, it should never change.\nInternally local identifiers, should be associated with public\nidentifiers.\n"
      },
      "file": {
        "name": "file",
        "in": "path",
        "required": true,
        "description": "`file` parameter is used to indicate the file that needs to be retrieved form the object structure.\n",
        "schema": {
          "type": "string",
          "examples": [
            "map"
          ]
        }
      },
      "cid": {
        "name": "cid",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Change id.\n\nUsed for incremental changes API, to get next changes after given\nchange id.\n\nMinimum requiremed is to at least add a separate column with a\ntimestamp of last change mede to a table. And this timestamp, can be\nused as change id.\n"
      },
      "service": {
        "name": "service",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/model"
        },
        "description": "A short service code name.\n\nEach word starts with upper case letter, first letter can't be a\nnumber.\n"
      }
    },
    "headers": {
      "traceresponse": {
        "description": "The `traceresponse` HTTP response header field identifies a completed request in a tracing system. For more context check [***trace-context***](https://w3c.github.io/trace-context/) documentation.\n",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "[0-9]{2}-[a-f0-9]{32}-[a-f0-9]{16}-[0-9]{2}",
          "description": "Consists of four fields - `version` `trace-id` `child-id` `trace-flags` separated by `-`.\n\n`trace-id` recommended to be in UUIDv4\n",
          "examples": [
            "00-0af7651916cd43dd8448eb211c80319c-00f067aa0ba902b7-01"
          ]
        }
      },
      "Cache-Control": {
        "description": "`Cache-Control` header that returns the caching information of the service. Caching is optional functionality.\n\nIf implemented should return values that depend on the type of the cache and rules that are set for the data. For example if data should only be stored in private cache (e.g. local caches in browsers) it should return `private`. If there are set parameters on data age as an example it should return `max-age`.\n\nDepending on data usage rules and data sharing agreements that are in place, it should reinforce terms that are relevant to the data in question. Use `no-cache` if data needs to be revalidate before each use with the origin server or `no-store` if data should not be stored in any caches.\n\nMultiple directives can be used separated by `, `. If they are conflicting, most restrictive directive should be honored.\n",
        "required": false,
        "schema": {
          "type": "string",
          "examples": [
            "no-store"
          ]
        }
      },
      "Last-Modified": {
        "description": "`Last-Modified` header that returns the `timestamp` of the last data modification. This is part of caching and is optional functionality.\n",
        "required": false,
        "schema": {
          "type": "string",
          "format": "timestamp",
          "examples": [
            "Tue, 22 Feb 2022 20:20:20 GMT"
          ]
        }
      },
      "ETag": {
        "description": "`ETag` header is an entity tag that uniquely represents the requested resource. It is a revision number for this item.\n",
        "required": false,
        "schema": {
          "type": "string",
          "examples": [
            "16dabe62-61e9-4549-a6bd-07cecfbc3508"
          ]
        }
      },
      "Vary": {
        "description": "`Vary` is a header used to indicate which headers are used when selecting a representation of a resource in a content negotiation and determines how to match future request headers to decide whether a cached response can be used rather than requesting a fresh one from the origin server. To allow multilanguage content support `Accept-Language` tag is used.\n",
        "required": true,
        "schema": {
          "type": "string",
          "examples": [
            "Accept-Language"
          ]
        }
      }
    },
    "schemas": {
      "version": {
        "type": "object",
        "properties": {
          "api": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "examples": [
                  "0.0.1"
                ]
              }
            }
          },
          "implementation": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "examples": [
                  "Spinta"
                ]
              },
              "version": {
                "type": "string",
                "examples": [
                  0.1
                ]
              }
            }
          },
          "build": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "examples": [
                  "0.0.1"
                ]
              }
            }
          }
        }
      },
      "dataset": {
        "type": "string",
        "pattern": "^[a-z](_?[a-z0-9]+)*$",
        "examples": [
          "gov"
        ]
      },
      "model": {
        "type": "string",
        "pattern": "^[A-Z]([A-Z]?[a-z0-9]+)*$",
        "examples": [
          "City"
        ]
      },
      "property": {
        "type": "string",
        "pattern": "^[a-z](_?[a-z0-9]+)*$",
        "examples": [
          "name"
        ]
      },
      "id": {
        "type": "string",
        "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
        "examples": [
          "abdd1245-bbf9-4085-9366-f11c0f737c1d"
        ]
      },
      "error": {
        "type": "object",
        "description": "In addition to usual HTTP error codes, additional error information available from the processing system is passed to the client.\n\nThis should include a more detailed overview of the internal, business logic or request processing errors that have occurred.\n\nMore complex errors can further expand this structure.\n",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "system",
              "dataset",
              "model",
              "property"
            ]
          },
          "code": {
            "description": "Each code corresponds to template text for that code",
            "type": "integer",
            "enum": [
              400,
              401,
              403,
              404,
              409,
              500,
              503
            ]
          },
          "template": {
            "description": "Corresponds to HTTP code",
            "type": "string",
            "enum": [
              "Bad Request",
              "Unauthorised",
              "Forbidden",
              "Not Found",
              "Conflict",
              "Internal Server Error",
              "Service Unavalable"
            ]
          },
          "message": {
            "description": "Message within the error object contains a more detailed description of the server errors.\nThese should include more detailed overview of the internal, business logic or request processing errors that have occurred.\n\nFor example:\n  - \"Could not find signature for and: <DaskDataFrameQueryBuilder, Expr>\"\n  - \"Cannot use .astype to convert from timezone-aware dtype to timezone-naive dtype. Use obj.tz_localize(None) or obj.tz_convert('UTC').tz_localize(None) instead.\"\n  - \"Property {property!r} not found\"\n  - \"Given value {value} is not defined in enum.\"\n  - \"New item has revision already set\"\n  - \"You do not have permission to push this property.\"\n",
            "type": "string",
            "examples": [
              "Could not find signature for and: <DaskDataFrameQueryBuilder, Expr>",
              "Cannot use .astype to convert from timezone-aware dtype to timezone-naive dtype. Use obj.tz_localize(None) or obj.tz_convert('UTC').tz_localize(None) instead.",
              "Property {property!r} not found",
              "Given value {value} is not defined in enum.",
              "New item has revision already set",
              "You do not have permission to push this property."
            ]
          },
          "context": {
            "type": "object",
            "properties": {
              "dataset": {
                "$ref": "#/components/schemas/dataset"
              },
              "model": {
                "$ref": "#/components/schemas/model"
              },
              "property": {
                "$ref": "#/components/schemas/property"
              },
              "id": {
                "$ref": "#/components/schemas/id"
              }
            },
            "additionalProperties": true
          }
        }
      },
      "errors": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "dependency": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "examples": [
              "Spinta"
            ]
          },
          "healthy": {
            "type": "boolean"
          }
        }
      },
      "health": {
        "type": "object",
        "properties": {
          "healthy": {
            "type": "boolean"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/dependency"
                }
              ]
            }
          }
        }
      },
      "datasetVersion": {
        "type": "integer",
        "pattern": "^[0-9]+$",
        "examples": [
          1
        ]
      },
      "_type": {
        "description": "Name of the namespace or model\n",
        "type": "string",
        "examples": [
          "datasets/gov/dc/geo/Continent"
        ]
      },
      "object": {
        "type": "object",
        "properties": {
          "_type": {
            "$ref": "#/components/schemas/_type"
          },
          "_id": {
            "description": "Unique object ID in UUID format\n",
            "type": "string",
            "format": "uuidv4",
            "examples": [
              "abdd1245-bbf9-4085-9366-f11c0f737c1d"
            ]
          },
          "_revision": {
            "description": "Revision number of the object. This number helps with ensuring data consistency during changes. Every time object is changed, it's revision number has to change.\n",
            "type": "string",
            "examples": [
              "16dabe62-61e9-4549-a6bd-07cecfbc3508"
            ]
          },
          "_txn": {
            "description": "`_txn` is transaction number. Multiple objects can be changed during a single transaction. All objects changed during a single transaction receive same `txn`.\n",
            "type": "string",
            "examples": [
              "792a5029-63c9-4c07-995c-cbc063aaac2c"
            ]
          },
          "_objectType": {
            "description": "Name of the object that is being added\n",
            "type": "string",
            "examples": [
              "Continent"
            ]
          },
          "_value": {
            "description": "Value of the object that is being added\n",
            "type": "string",
            "examples": [
              "Europe"
            ]
          },
          "_file": {
            "description": "A flag that indicates if the object is a file and it's file type. If empty, object is not a file. If value is present, it is a file extension of the file (e.g. \".txt\", \".jpg\").\n",
            "type": "string",
            "examples": [
              "jpg"
            ]
          }
        },
        "patternProperties": {
          "^[a-z](_?[a-z0-9]+)*$": {
            "oneOf": [
              {
                "$ref": "./absent.yaml"
              },
              {
                "$ref": "./boolean.yaml"
              },
              {
                "$ref": "./integer.yaml"
              },
              {
                "$ref": "./number.yaml"
              },
              {
                "$ref": "./binary.yaml"
              },
              {
                "$ref": "./string.yaml"
              },
              {
                "$ref": "./text.yaml"
              },
              {
                "$ref": "./dateTime.yaml"
              },
              {
                "$ref": "./date.yaml"
              },
              {
                "$ref": "./time.yaml"
              },
              {
                "$ref": "./temporal.yaml"
              },
              {
                "$ref": "./geometry.yaml"
              },
              {
                "$ref": "./spatial.yaml"
              },
              {
                "$ref": "./money.yaml"
              },
              {
                "$ref": "./file.yaml"
              },
              {
                "$ref": "./image.yaml"
              },
              {
                "$ref": "./generic.yaml"
              },
              {
                "$ref": "./ref.yaml"
              },
              {
                "$ref": "./backref.yaml"
              },
              {
                "$ref": "./array.yaml"
              },
              {
                "$ref": "./URL.yaml"
              },
              {
                "$ref": "./URI.yaml"
              }
            ]
          }
        },
        "additionalProperties": false,
        "description": "Object represents a single row in a table.\n\nSome properties can reference other objects, using composition as\nspecified in `components/schemas/ref`, optionally dublicating\nproperties from a referenced model or extending referenced model with\nnew properties.\n"
      },
      "objects": {
        "type": "object",
        "properties": {
          "_type": {
            "type": "string",
            "examples": [
              "datasets/gov/dc/geo/Continent"
            ]
          },
          "_data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/object"
            }
          }
        }
      },
      "object-csv": {
        "type": "string",
        "description": "A string of object values separated by `,`",
        "examples": [
          "datasets/gov/dc/geo/Continent,abdd1245-bbf9-4085-9366-f11c0f737c1d,16dabe62-61e9-4549-a6bd-07cecfbc3508,792a5029-63c9-4c07-995c-cbc063aaac2c,Continent,Europe,"
        ]
      },
      "objects-csv": {
        "type": "object",
        "properties": {
          "_header": {
            "type": "string",
            "description": "A string of header values of the object separated by ','",
            "examples": [
              "_type,_id,_revision,_txn,_objectType,_value"
            ]
          },
          "_data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/object-csv"
            }
          }
        }
      },
      "_op": {
        "type": "string",
        "enum": [
          "insert",
          "patch"
        ]
      },
      "insert": {
        "type": "object",
        "properties": {
          "_type": {
            "type": "string",
            "examples": [
              "Continet"
            ]
          },
          "_value": {
            "type": "string",
            "examples": [
              "Europe"
            ]
          }
        },
        "additionalProperties": false
      },
      "multiInsert": {
        "type": "object",
        "properties": {
          "_data": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/_op"
                },
                {
                  "$ref": "#/components/schemas/_type"
                },
                {
                  "$ref": "#/components/schemas/insert"
                }
              ]
            }
          }
        }
      },
      "update": {
        "type": "object",
        "properties": {
          "_rev": {
            "type": "string",
            "format": "uuidv4",
            "examples": [
              "792a5029-63c9-4c07-995c-cbc063aaac2c"
            ]
          },
          "_type": {
            "type": "string",
            "examples": [
              "Continet"
            ]
          },
          "_value": {
            "type": "string",
            "examples": [
              "Europe"
            ]
          }
        },
        "additionalProperties": false
      },
      "upsert": {
        "type": "object",
        "properties": {
          "_op": {
            "type": "string",
            "enum": [
              "upsert"
            ]
          },
          "_type": {
            "type": "string",
            "examples": [
              "Continet"
            ]
          },
          "_value": {
            "type": "string",
            "examples": [
              "Europe"
            ]
          }
        },
        "additionalProperties": false
      },
      "change": {
        "type": "object",
        "properties": {
          "_cid": {
            "type": "integer",
            "examples": [
              11
            ]
          },
          "_id": {
            "type": "string",
            "format": "uuidv4",
            "examples": [
              "abdd1245-bbf9-4085-9366-f11c0f737c1d"
            ]
          },
          "_rev": {
            "type": "string",
            "format": "uuidv4",
            "examples": [
              "16dabe62-61e9-4549-a6bd-07cecfbc3508"
            ]
          },
          "_txn": {
            "type": "string",
            "examples": [
              "792a5029-63c9-4c07-995c-cbc063aaac2c"
            ]
          },
          "_created": {
            "type": "string",
            "format": "datetime",
            "examples": [
              "2021-07-30T14:03:14.645198"
            ]
          },
          "_op": {
            "type": "string",
            "enum": [
              "insert",
              "patch",
              "delete"
            ]
          },
          "_objectType": {
            "type": "string",
            "examples": [
              "Continent"
            ]
          },
          "_value": {
            "type": "string",
            "examples": [
              "Europe"
            ]
          }
        },
        "additionalProperties": false
      },
      "changes": {
        "type": "object",
        "properties": {
          "_type": {
            "$ref": "#/components/schemas/_type"
          },
          "_data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/change"
            }
          }
        }
      }
    },
    "responses": {
      "error400": {
        "description": "Bad Request",
        "headers": {
          "traceresponse": {
            "$ref": "#/components/headers/traceresponse"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errors"
            }
          }
        }
      },
      "error500": {
        "description": "Internal Server Error",
        "headers": {
          "traceresponse": {
            "$ref": "#/components/headers/traceresponse"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errors"
            }
          }
        }
      },
      "error503": {
        "description": "Service Uavailable",
        "headers": {
          "traceresponse": {
            "$ref": "#/components/headers/traceresponse"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errors"
            }
          }
        }
      },
      "error403": {
        "description": "Forbidden",
        "headers": {
          "traceresponse": {
            "$ref": "#/components/headers/traceresponse"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errors"
            }
          }
        }
      },
      "error404": {
        "description": "Not Found",
        "headers": {
          "traceresponse": {
            "$ref": "#/components/headers/traceresponse"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/errors"
            }
          }
        }
      }
    }
  }
}