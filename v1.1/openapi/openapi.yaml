openapi: 3.1.0

info:
  version: 1.1.0
  title: Universal application programming interface
  contact:
    name: VSSA
    url: https://vssa.lrv.lt/
    email: info@vssa.lt
  license:
    name: CC-BY 4.0
    url: https://creativecommons.org/licenses/by/4.0/
  summary: |
    Universal API specification, provided as OpenAPI JSON file for Lithuanian
    government institutions as a template for implementing API's for data
    exchange in a standardized and interoperable manner.
  description:
    $ref: docs.md

externalDocs:
  url: https://ivpk.github.io/uapi

servers:
  - url: get.data.gov.lt
    description: Data access server
  - url: put.data.gov.lt
    description: Data update server

tags:
  - name: objects
    description: Operations with multiple Objects
  - name: object
    description: Operations with single Object
  - name: resource
    description: Operations with Object subresource
  - name: change
    description: Change tracking operations
  - name: revision
    description: Operations that return Object revisions
  - name: services
    description: |
      Service functions are not as restricted as data API endpoints. Services
      are not required to return an object with a public id, there are no
      changes API, nor revisions.

      This section is primarily for definition of legacy or non data access services that do not have to be fully based on DSA data structure.
  - name: utility
    description: Utility operations performed on the API itself

x-tagGroups:
  - name: Actions
    tags:
      - objects
      - object
      - resource
      - change
      - revision
  - name: Services
    tags:
      - services
  - name: Utility
    tags:
      - utility

paths:
  /version:
    $ref: paths/version.yaml
  /health:
    $ref: paths/health.yaml
  /{group}/{form}/{org}/{catalog}/{dataset}/{version}/{model}:
    $ref: paths/model.yaml
  /{group}/{form}/{org}/{catalog}/{dataset}/{version}/{model}/{id}:
    $ref: paths/object.yaml
  /{group}/{form}/{org}/{catalog}/{dataset}/{version}/{model}/{id}/:wipe:
    $ref: paths/wipe.yaml
  /{group}/{form}/{org}/{catalog}/{dataset}/{version}/{model}/{id}/{property}:
    $ref: paths/property.yaml
  /{group}/{form}/{org}/{catalog}/{dataset}/{version}/{model}/:changes/{cid}:
    $ref: paths/change.yaml
  /{group}/{form}/{org}/{catalog}/{dataset}/{version}/{model}/:changes:
    $ref: paths/changes.yaml
  /{group}/{form}/{org}/{catalog}/{dataset}/{version}/{model}/{id}/:changes/{cid}:
    $ref: paths/objectChange.yaml
  /{group}/{form}/{org}/{catalog}/{dataset}/{version}/{model}/{id}/:changes:
    $ref: paths/objectChanges.yaml
  /{group}/{form}/{org}/{catalog}/{dataset}/{version}/{model}/{id}/rev/{rev}:
    $ref: paths/rev.yaml
  /services/{form}/{org}/{catalog}/{dataset}/{version}/{service}:
    $ref: paths/service.yaml

components:
  securitySchemes:

    UAPI_auth:
      description: |
        Client Credentials flow
        Provides access based on client credentials. Used to manage data for your Organisation. Access is granted to perform actions based on scope selected and access levels assigned to the client credentials.

        Authorization Code flow
        Provides general access to the data. Data access is managed by client rights and the authorization code. In addition to that, if there are active Smart Contracts associated with the client.

        **Scope elements**
        The core structure of the scope is `uapi:/{group}/{form}/{org}/{catalog}/{dataset}/{model}/@{scope}/:{action}`

        This is a full path that can be used to narrow down the scope of access. It is constructed from these elements:
          - `uapi:/` - core API element. Grants all access if used on its own.
          - `uapi:/:{action}` - provides `{action}` access on all elements.
          - `uapi:/@{scope}` - provides all access on elements based on `{scope}` filter.
          - `uapi:/@{scope}/:{action}` - provides `{action}` acces s on elements based on `{scope}` filter.
          - `uapi:/{group}/{form}/{org}/{catalog}/{dataset}` - provides all access for a specific `{dataset}`

        List of available `{action}`:
          - `getone` - ability to get one object data, based on provided identifier.
          - `getall` - ability to get a list of all objects.
          - `search` - ability to get data based on URL query.
          - `changes` - ability to get change history of a single object or multiple objects.
          - `insert` - ability to create new objects.
          - `update` - ability to update existing objects.
          - `delete` - galimybė trinti objektus, paliekant įrašą keitimų istorijoje.
          - `wipe` - galimybė neatstatomai trinti objektus, nepaliekant įrašo keitimų istorijoje.

        Combined actions:
          - `read` - combines getone, getall, search, changes.
          - `write` - combines insert, update, delete.
          - `upsert` - combines insert and update.
          - `rw` - combines read and write.

        The scope definition is dynamic and is dependent on the specific resource and UAPI implementation. Additional usage specific scope can be defined added to the flows below.

        The mandatory part is the use of OAuth as the authentication and authorization method and the use of either Client Credentials or Autorization Code flows, or both.
      type: oauth2
      flows:
        clientCredentials: 
          tokenUrl: https://auth.gov.lt/auth/token
          scopes:
            uapi:/ : All access
        authorizationCode:
          authorizationUrl: https://api.gov.lt/oauth
          tokenUrl: https://auth.gov.lt/auth/token
          scopes:
            uapi:/ : All access
